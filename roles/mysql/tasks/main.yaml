- name: Install MySQL server
  ansible.builtin.apt:
    name: mysql-server

- name: Copy new config for MySQL
  ansible.builtin.template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: restart mysql

- name: Start MySQL server
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes

- name: Install pymysql
  ansible.builtin.apt:
    name: python3-pymysql

- name: Create MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL user {{ mysql_user }}
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create MySQL user {{ mysql_replication_user }}
  community.mysql.mysql_user:
    name: "{{ mysql_replication_user }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv:
      '*.*': 'REPLICATION SLAVE'
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Set Read Only ON
  community.mysql.mysql_variables:
    variable: read_only
    value: 'ON'
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: inventory_hostname != mysql_host
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Set Read Only OFF
  community.mysql.mysql_variables:
    variable: read_only
    value: 'OFF'
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: inventory_hostname == mysql_host
  notify:
    - Reset MySQL source
    - Reset MySQL replica
